<!--

                            ***********************************
                            presence  Build Script
                              Extended from 
                                 Share Extras build script  
                            ***********************************
    
    presence build script
    Author: Rasmus Melgaard
    Version: 1.0
    
    based on
    Share Extras build script
    Author: Will Abson
    Version: 1.6
    
    Provides a set of targets for building extensions to Alfresco Share in ZIP, AMP and JAR archive 
    formats. Since Alfresco 3.3, JAR is the recommended package structure for all simple extensions.
    For more complex extensions that add additional Java libraries, AMP should be used.
    
    The following file structure is required in your project directory
    
        /build.xml - This file
        /config - All web-tier configuration files, e.g. web scripts and Surf configuration
        /source/web - All static resource files, e.g. CSS, JS (optional)
        /source/java - All Java source files (optional)
        
    For building AMP files, the files module.properties and file-mapping.properties are also required
    in the project's root directory.
    
    During the build process, a temporary 'build' directory will be created in the base 
    project directory. This may be removed at any time using the 'clean' target.

-->
<project basedir="." default="dist-jar" name="Presence Share Build Script">

	<!-- Allow override properties -->
	<property file="build.properties" />
	<property file="${user.home}/build.properties" />

	<!-- Property default values. May be overridden using above files or via command-line args -->
	<property name="jar.name" value="repo-extension.jar" />
	<property name="zip.name" value="repo-extension.zip" />
	<property name="amp.name" value="repo-extension.amp" />
	<property name="config.includes" value="**/*.*" />
	<property name="config.excludes" value="" />
	<property name="build.res.includes" value="**/*.*" />
	<property name="build.res.excludes" value="" />
	<property name="build.res.dir" value="webapps/alfresco" />
	<property name="build.classes.dir" value="${build.res.dir}/WEB-INF/classes" /> <!-- shared/classes -->
 	<property name="build.lib.dir" value="shared/lib" />
	<!-- alternatively 'shared/lib' , but some java classes are not available here -->
	<property name="yuicompress.warn" value="false" />
	<property name="javac.debug" value="off" />
	<!-- Tomcat properties to reload web scripts or the manager webapp -->
	<property name="tomcat.url" value="http://localhost:8080" />
	<property name="tomcat.repo.url" value="${tomcat.url}" />
	<property name="tomcat.share.url" value="${tomcat.url}" />
	<!-- Tomcat properties to reload web scripts -->
	<property name="webapp.alfresco.path" value="/alfresco" />
	<property name="webapp.share.path" value="/share" />
	<property name="post.verbose" value="false" />
	<property name="repo.admin.username" value="admin" />
	<property name="repo.admin.password" value="admin" />
	<property name="repo.scripts.index" value="${tomcat.repo.url}${webapp.alfresco.path}/service/index" />
	<property name="repo.cache.clear" value="${tomcat.repo.url}${webapp.alfresco.path}/service/caches/dependency/clear" />
	<property name="share.scripts.index" value="${tomcat.share.url}${webapp.share.path}/page/index" />
	<!-- Properties to access the Tomcat Manager application -->
	<property name="webapp.manager.url" value="${tomcat.url}/manager/text" />
	<property name="webapp.manager.username" value="admin" />
	<property name="webapp.manager.password" value="" />
	<!-- Paths to local Tomcat instances -->
	<property name="tomcat.repo.home" value="${tomcat.home}" />
	<property name="tomcat.share.home" value="${tomcat.home}" />

	<!-- Additional property values. Generally should not be overridden -->
	<property name="config.dir" value="${basedir}/config" />
	<property name="res.dir" value="${basedir}/source/web" />
	<property name="src.dir" value="${basedir}/source/java" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="build.compile.dir" value="${build.dir}/classes" />
	<property name="build.jar.dir" value="${build.dir}/jar" />
	<property name="build.zip.dir" value="${build.dir}/war" />
	<property name="build.amp.dir" value="${build.dir}/amp" />
	<property name="dist.dir" value="${build.dir}/dist" />
	<property name="amp.file.properties" value="module.properties" />
	<property name="amp.file.mappings" value="file-mapping.properties" />

	<property name="dir.src.tests" value="${basedir}/test/java" />
	<property name="dir.build.testresults" value="${build.dir}" />

	<!-- Define optional tasks -->
	<path id="junit.classpath">
		<fileset dir="${alfresco.sdk.dir}">
			<include name="lib/server/dependencies/junit-dep-4.11-SNAPSHOT-20120805-1225.jar"/>
			
		</fileset>
	</path>

	<path id="catalina.classpath">
		<fileset dir="${tomcat.home}">
			<include name="lib/*.jar"/>
			<include name="bin/*.jar"/>
		</fileset>
	</path>

	<taskdef name="reload"  classname="org.apache.catalina.ant.ReloadTask" >
		<classpath>
			<path refid="catalina.classpath" />
		</classpath>
	</taskdef>

	<!--
    <taskdef name="post"    classname="net.sf.antcontrib.net.PostTask" />
    -->

	<!-- Alias targets -->
	<target name="build-zip" depends="build-zip-tomcat" />
	<target name="dist-zip" depends="dist-zip-tomcat" />

	<!-- Additional classpath and task definitions -->

	<path id="yuicompressor.classpath">
		<fileset dir="lib">
			<include name="yuicompressor-2.4.2.jar"/>
			<include name="yui-compressor-ant-task-0.5.jar"/>
		</fileset>
	</path>

	<taskdef name="yuicompress" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
		<classpath>
			<path refid="yuicompressor.classpath" />
		</classpath>
	</taskdef>

	<path id="ml-ant-http.classpath">
		<fileset dir="lib">
			<include name="ml-ant-http-1.1.3.jar" />
		</fileset>
	</path>
	<path id="ant-junit.classpath">
		<fileset dir="lib">
			<include name="ant-junit*.jar" />
		</fileset>
	</path>
	<path id="compile.classpath">
		<fileset dir="${alfresco.sdk.dir}">
			<exclude name="**/ant-*.jar"/>
			<include name="lib/server/**/*.jar" />
			<!-- include name="lib/server/dependencies/**/*.jar" />
            <include name="lib/server/*.jar" / -->

		</fileset>
	</path>

	<taskdef name="http" classname="org.missinglink.ant.task.http.HttpClientTask">
		<classpath>
			<path refid="ml-ant-http.classpath" />
		</classpath>
	</taskdef>


	<!-- Main build target definitions -->


	<!-- Clean out the build and distribution directories -->
	<target name="clean" description="Clean out all build directories">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!-- Create required prerequisite directory structure -->
	<target name="prepare" description="Create initial build structures">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
		<!-- copy todir="${dir.src.tests}">
			<fileset file="${tomcat.repo.home}/shared/classes/alfresco-global.properties" />
		</copy
		<copy todir="${build.dir}/classes" overwrite="true">
			<fileset file="${dir.src.tests}/alfresco-global.properties" />
		</copy -->
	</target>

	<!-- Compile Java source code -->
	<target name="compile" description="Compile Java source code">
		<mkdir dir="${build.compile.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.compile.dir}" debug="${javac.debug}" includeantruntime="false">
			<classpath>
				<path refid="compile.classpath" />
			</classpath>
		</javac>
	</target>

	<target name="compile-tests" description="Compile Java source code">
		<mkdir dir="${build.compile.dir}" />
		<javac srcdir="${dir.src.tests}" destdir="${build.compile.dir}" debug="${javac.debug}" includeantruntime="false">
			<classpath>
				<path refid="compile.classpath" />
			</classpath>
		</javac>
	</target>
	<!--
        Assemble the configuration and resource files in a JAR file structure. This mechanism 
        was introduced in Alfresco 3.3 and allows Share extensions containing both repository and 
        web-tier web scripts, Spring/Surf configuration and static assets to be added to the servlet 
        container as a single library. For more complex extensions, AMP files should be used.
        
        This target excludes the files custom-slingshot-application-context.xml, share-config-custom.xml
        and similar files from being copied into the classpath as these should not generally be included 
        within JAR files as it could lead to multiple copies of them being present. If found however,
        alfresco/web-extension/share-config-custom.xml will be copied into the META-INF directory,
        from where it can be loaded in 3.4.
    -->
	<target name="build-jar" description="Assemble configuration and resource files in a JAR file structure">
		<mkdir dir="${build.jar.dir}" />
		<!-- Copy configuration files, web scripts, etc. directly into the JAR so they appear on the 
        classpath. -->
		<copy todir="${build.jar.dir}" includeEmptyDirs="false">
			<fileset dir="${config.dir}" includes="${config.includes}">
				<!-- Spring config -->
				<exclude name="web-application-config.xml" />
				<exclude name="surf-config.xml" />
				<exclude name="alfresco/slingshot-application-context.xml" />
				<exclude name="alfresco/web-extension/custom-slingshot-application-context.xml" />
				<!-- Surf config -->
				<exclude name="alfresco/share*-config.xml" />
				<exclude name="alfresco/web-extension/share-config-custom.xml" />
				<!-- Global excludes -->
				<exclude name="${config.excludes}" />
			</fileset>
		</copy>
		<!-- Copy Java class files -->
		<copy todir="${build.jar.dir}" includeEmptyDirs="false">
			<fileset dir="${build.compile.dir}" includes="**/*.class">
			</fileset>
		</copy>
		<!-- Copy web-tier resources into the JAR. These can then be loaded by browsers via Share's resources 
        servlet by prefixing their path with '/res' -->
		<mkdir dir="${build.jar.dir}/META-INF" />
		<copy todir="${build.jar.dir}/META-INF" includeEmptyDirs="false">
			<fileset dir="${res.dir}" includes="${build.res.includes}" excludes="${build.res.excludes}" />
		</copy>
		<!-- Map alfresco/web-extension/share-config-custom.xml to META-INF/share-config-custom.xml in the JAR -->
		<copy todir="${build.jar.dir}/META-INF" includeEmptyDirs="false">
			<fileset dir="${config.dir}">
				<filename name="alfresco/web-extension/share-config-custom.xml" />
			</fileset>
			<globmapper from="alfresco/web-extension/*.xml" to="*.xml" handledirsep="true" />
		</copy>
		<!-- Minify JS -->
		<!--yuicompress fromdir="${res.dir}" todir="${build.jar.dir}/META-INF" excludes="**/*-min.js" warn="${yuicompress.warn}">
			<include name="**/*.js" />
		</yuicompress -->
	</target>

	<!-- Build the JAR file -->
	<target name="dist-jar" depends="clean, prepare, compile, build-jar" 
      description="Build a JAR file containing configuration and resource files">
		<jar destfile="${dist.dir}/${jar.name}">
			<fileset dir="${build.jar.dir}" />
		</jar>
	</target>
	<target name="hotcopy-tomcat-jar-remove" description="Hot copy JAR file into a local Tomcat instance">
		<delete >
			<fileset file="${tomcat.repo.home}/${build.lib.dir}/${jar.name}" />
		</delete>
	</target>
	<target name="hotcopy-code" depends="clean, prepare, compile, hotcopy-tomcat-jar-remove" description="Hotcopy code to tomcat">
			<!-- Copy configuration files, web scripts, etc. directly into the JAR so they appear on the  classpath. -->
			<copy overwrite="true" todir="${tomcat.repo.home}/${build.classes.dir}" includeEmptyDirs="false">
				<fileset dir="${config.dir}" includes="${config.includes}">
					<!-- Spring config -->
					<exclude name="web-application-config.xml" />
					<exclude name="surf-config.xml" />
					<exclude name="alfresco/slingshot-application-context.xml" />
					<exclude name="alfresco/web-extension/custom-slingshot-application-context.xml" />
					<!-- Surf config -->
					<exclude name="alfresco/share*-config.xml" />
					<exclude name="alfresco/web-extension/share-config-custom.xml" />
					<!-- Global excludes -->
					<exclude name="${config.excludes}" />
				</fileset>
			</copy>
			<!-- Copy Java class files -->
			<copy overwrite="true" todir="${tomcat.repo.home}/${build.classes.dir}" includeEmptyDirs="false">
				<fileset dir="${build.compile.dir}" includes="**/*.class">
				</fileset>
			</copy>
			<!-- Copy web-tier resources into the JAR. These can then be loaded by browsers via Share's resources --> 
	        <!-- servlet by prefixing their path with '/res' -->

			<copy todir="${tomcat.repo.home}/${build.res.dir}" includeEmptyDirs="false">
				<fileset dir="${res.dir}" includes="${build.res.includes}" excludes="${build.res.excludes}" />
			</copy>
			<!-- Map alfresco/web-extension/share-config-custom.xml to META-INF/share-config-custom.xml in the JAR -->
	<!-- 		<copy todir="$${tomcat.share.home}/${build.classes.dir}/" includeEmptyDirs="false">
				<fileset dir="${config.dir}">
					<filename name="alfresco/web-extension/share-config-custom.xml" />
				</fileset>
				<globmapper from="alfresco/web-extension/*.xml" to="*.xml" handledirsep="true" />
			</copy> -->
			<!-- Minify JS -->
			<!--yuicompress fromdir="${res.dir}" todir="${build.jar.dir}/META-INF" excludes="**/*-min.js" warn="${yuicompress.warn}">
				<include name="**/*.js" />
			</yuicompress -->
			
		</target>

	<!--
        Assemble the configuration and resource files in a file structure suitable for deploying
        into an existing Tomcat installation, with the following directories.
        
            /shared/classes/alfresco                          Repository/Share configuration files
            /webapps/share                                    Share web resources
        
        By default web resources are placed in directly in the 'share' web application. You 
        can specify a different directory by overriding the build.res.dir property value. Set 
        this to 'webapps/ROOT/share-extension' to use the pre-3.3 recommended layout.
        
        The share-extension directory is not an official location for storing web resources 
        required by extensions but worked as an interim measure for versions of Alfresco prior to
        version 3.3, provided that the ROOT webapp is enabled in your Tomcat instance.
        
        By default configuration is placed in directly in Tomcat's shared/classes directory. You 
        can specify a different directory by overriding the build.classes.dir property value. Set 
        this to 'webapps/share/WEB-INF/classes' to place files on the classpath inside the webapp.
        
        Unlike build-jar this target does not exclude any particular configuration files from the
        file structure, however the hotcopy-tomcat-zip task will err on the side of caution and 
        will not copy files such as share-config-custom.xml itself into Tomcat.
    -->
	<target name="build-zip-tomcat" depends="build-zip-prepare,build-zip-config,compile"
      description="Assemble the configuration and resource files for a Tomcat deployment structure">
		<!-- Copy web assets -->
		<copy todir="${build.zip.dir}/${build.res.dir}">
			<fileset dir="${res.dir}" includes="${build.res.includes}" excludes="${build.res.excludes}" />
		</copy>
		<!-- Minify JS -->
		<yuicompress fromdir="${res.dir}" todir="${build.zip.dir}/${build.res.dir}" excludes="**/*-min.js" warn="${yuicompress.warn}">
			<include name="**/*.js" />
		</yuicompress>
		<!-- Copy class files -->
		<copy todir="${build.zip.dir}/webapps/${build.res.dir.name}/WEB-INF/classes">
			<fileset dir="${build.compile.dir}" includes="${build.res.includes}" excludes="${build.res.excludes}" />
		</copy>
	</target>

	<target name="build-zip-prepare">
		<mkdir dir="${build.zip.dir}/${build.classes.dir}" />
		<mkdir dir="${build.zip.dir}/${build.res.dir}" />
	</target>

	<target name="build-zip-config">
		<copy todir="${build.zip.dir}/${build.classes.dir}">
			<fileset dir="${config.dir}" includes="${config.includes}" excludes="${config.excludes}" />
		</copy>
	</target>

	<!-- Build the Tomcat ZIP file -->
	<target name="dist-zip-tomcat" depends="clean, prepare, build-zip-tomcat"
        description="Build a ZIP file containing the customisations that can be deployed in an existing Tomcat installation">
		<zip destfile="${dist.dir}/${zip.name}">
			<fileset dir="${build.zip.dir}" />
		</zip>
	</target>

	<!--
        Assemble the configuration and resource files in an AMP file structure. The files
        module.properties and file-mapping.properties must be present in the root of the 
        project.
        
        This creates a structure which can be deployed into an exising share.war file using the 
        Alfresco Module Management Tool (MMT). See http://wiki.alfresco.com/wiki/AMP_Files.
        
        This mechanism is compatible with all versions of Alfresco Share and can therefore be 
        used as an alternative to the JAR extension mechanism introduced in version 3.3.
        
        Note that this mechanism will place files directly into the webapp structure when the 
        AMP is deployed, rather than the extension mechanisms used by the JAR and ZIP files that
        ensure files are placed outside the webapp for safety during upgrades, etc.
        
        In this case this should be acceptable since the MMT modifies the WAR file itself 
        rather than just the exploded files, and AMPs can always be re-applied if needed.
        
        In version 3.3 and above the JAR file mechanism is recommended as an alternative for all
        non-complex extensions.
    -->
	<target name="build-amp" depends="clean, prepare, compile" description="Assemble the configuration and resource files in an AMP file structure">

		<!-- Copy properties files -->
		<copy todir="${build.amp.dir}" file="${amp.file.properties}" failonerror="true" />
		<copy todir="${build.amp.dir}" file="${amp.file.mappings}" failonerror="true" />

		<!-- Copy config files -->
		<mkdir dir="${build.amp.dir}/config" />
		<copy todir="${build.amp.dir}/config">
			<fileset dir="${config.dir}" includes="${config.includes}" excludes="${config.excludes}" />
		</copy>

		<!-- Copy resource files -->
		<mkdir dir="${build.amp.dir}/web" />
		<copy todir="${build.amp.dir}/web">
			<fileset dir="${res.dir}" includes="${build.res.includes}" excludes="${build.res.excludes}" />
		</copy>

		<!-- Copy Java class files -->
		<mkdir dir="${build.amp.dir}/web/WEB-INF/classes" />
		<copy todir="${build.amp.dir}/web/WEB-INF/classes" includeEmptyDirs="false">
			<fileset dir="${build.compile.dir}" includes="**/*.class">
			</fileset>
		</copy>

		<!-- Minify JS -->
		<yuicompress fromdir="${res.dir}" todir="${build.amp.dir}/web" excludes="**/*-min.js" warn="${yuicompress.warn}">
			<include name="**/*.js" />
		</yuicompress>
	</target>

	<!-- Build the AMP file -->
	<target name="dist-amp" depends="build-amp" description="Build an AMP file containing all customisations">
		<zip destfile="${dist.dir}/${amp.name}">
			<fileset dir="${build.amp.dir}" />
		</zip>
	</target>

	<!-- Shared path definition used to copy files into the local Tomcat instance(s) -->
	<patternset id="hotcopy-tomcat-zip-patternset">
		<!-- Spring config -->
		<exclude name="**/classes/web-application-config.xml" />
		<exclude name="**/classes/surf-config.xml" />
		<exclude name="**/classes/alfresco/slingshot-application-context.xml" />
		<exclude name="**/classes/alfresco/web-extension/custom-slingshot-application-context.xml" />
		<!-- Surf config -->
		<exclude name="**/classes/alfresco/share*-config.xml" />
		<exclude name="**/classes/alfresco/web-extension/share-config-custom.xml" />
	</patternset>

	<!--
        Hot copy individual files into a local Tomcat instance.
        
        In version 3.3 and above the JAR file mechanism is recommended for distributing your 
        customisations, but this target can still be used during development as it allows you to
        reload changes without restarting Tomcat.
    -->
	<target name="hotcopy-tomcat-zip" depends="build-zip-tomcat" description="Hot copy individual files into a local Tomcat instance">
		<echo message="Copying repository files" />
		<copy todir="${tomcat.repo.home}" includeEmptyDirs="false">
			<fileset dir="${build.zip.dir}">
				<patternset refid="hotcopy-tomcat-zip-patternset" />
				<!-- Exclude static resources -->
				<exclude name="${build.res.dir}/**" />
				<!-- Exclude web-tier config -->
				<exclude name="**/classes/alfresco/site-webscripts/**" />
				<exclude name="**/classes/alfresco/site-data/**" />
				<exclude name="**/classes/alfresco/web-extension/**" />
				<exclude name="**/classes/org/springframework/extensions/surf/**" />
			</fileset>
		</copy>
		<echo message="Copying Share files" />
		<copy todir="${tomcat.share.home}" includeEmptyDirs="false">
			<fileset dir="${build.zip.dir}">
				<patternset refid="hotcopy-tomcat-zip-patternset" />
				<!-- Exclude repo-tier web scripts config -->
				<exclude name="**/classes/alfresco/extension/**" />
				<exclude name="**/classes/alfresco/templates/webscripts/**" />
			</fileset>
		</copy>
	</target>

	<!--
        Hot copy JAR file into a local Tomcat instance.
    -->
	<target name="hotcopy-tomcat-jar" depends="dist-jar" description="Hot copy JAR file into a local Tomcat instance">
		<mkdir dir="${tomcat.repo.home}/${build.lib.dir}" />
		<mkdir dir="${tomcat.share.home}/${build.lib.dir}" />

		<copy todir="${tomcat.share.home}/${build.lib.dir}">
			<fileset file="${dist.dir}/${jar.name}" />
		</copy>
	</target>

	<!--
        Web script reloading from Ant. These tasks use the HTTP task from 
        http://code.google.com/p/missing-link/.
    -->
	<target name="reload-webscripts-repo" depends="" description="Reload repository webscripts">
		<http url="${repo.scripts.index}"
               method="POST"
               printrequest="false"
               printrequestheaders="false"
               printresponse="false"
               printresponseheaders="false"
               expected="200"
               failonunexpected="true">
			<credentials username="${repo.admin.username}" password="${repo.admin.password}" />
			<query>
				<parameter name="reset" value="on" />
			</query>
		</http>
	</target>

	<target name="reload-webscripts-share" depends="" description="Reload Share webscripts">
		<http url="${share.scripts.index}"
               method="POST"
               printrequest="false"
               printrequestheaders="false"
               printresponse="false"
               printresponseheaders="false"
               expected="200"
               failonunexpected="true">
			<credentials username="${repo.admin.username}" password="${repo.admin.password}" />
			<query>
				<parameter name="reset" value="on" />
			</query>
		</http>
	</target>
	<target name="clear-cache-alfresco" description="Clear cache in share web application" depends="">
		<http url="${repo.cache.clear}"
               method="POST"
               printrequest="false"
               printrequestheaders="false"
               printresponse="false"
               printresponseheaders="false"
               expected="200"
               failonunexpected="true">
			<credentials username="${repo.admin.username}" password="${repo.admin.password}" />
			<!-- query>
				<parameter name="reset" value="on" />
			</query -->
		</http>
	</target>
	<!--
        Uncomment to enable web application reloading from Ant. These tasks use the optional Tomcat
        ant tasks from catalina-ant.jar distributed with Tomcat.
        
        To use these tasks you will need to add catalina-ant.jar to your Ant libs and uncomment the 
        task definitions at the start of this file.
    -->
	<!-- "401 Unauthorized
You are not authorized to view this page. If you have not changed any configuration files, please examine the file conf/tomcat-users.xml in your installation. That file will contain the credentials to let you use this webapp.
You will need to add manager role to the config file listed above"

This is due to the fact that <Valve className="org.apache.catalina.authenticator.SSLAuthenticator" securePagesWithPragma="false" /> now appears in tomcat/conf/context.xml. If you comment this out and restart, you will be able to access Tomcat Manager (provided you have also done the other things required e.g. edited tomcat-users.xml).-->
	<target name="reload-webapp-alfresco" description="Reload alfresco web application" depends="">
		<echo>Url: ${webapp.manager.url}</echo>
		<echo>Path: ${webapp.alfresco.path}</echo>
		<echo>User: ${webapp.manager.username}</echo>
		<echo>Pass: ${webapp.manager.password}</echo>
		<reload 
            url="${webapp.manager.url}" 
            username="${webapp.manager.username}" 
            password="${webapp.manager.password}" 
            path="${webapp.alfresco.path}"/>
	</target>

	<target name="reload-webapp-share" description="Reload share web application" depends="">
		<echo>Url: ${webapp.manager.url}</echo>
		<echo>Path: ${webapp.alfresco.path}</echo>
		<echo>User: ${webapp.manager.username}</echo>
		<echo>Pass: ${webapp.manager.password}</echo>
		<reload 
            url="${webapp.manager.url}" 
            username="${webapp.manager.username}" 
            password="${webapp.manager.password}" 
            path="${webapp.share.path}"/>
	</target>

	<target name="ant-build">
		<echo>Ant version is ${ant.version}</echo>
	</target>

	<!-- JUnit tests -->
	<target name="unittest" description="Build and Test" depends="ant-build, clean, prepare, compile, compile-tests">
		<copy todir="${build.compile.dir}/alfresco">
			<fileset dir="${alfresco.sdk.dir}/lib/server/config/alfresco" />
			</copy>

		<junit fork="yes" forkmode="once" haltonfailure="false"
			haltonerror="false" failureproperty="tests.failures" errorproperty="tests.errors"
			includeantruntime="true" showoutput="true" printsummary="true">
			<jvmarg value="-XX:MaxPermSize=512m"/>
			<jvmarg value="-Xms128m"/>
			<jvmarg value="-Xmx1024m"/>
			<jvmarg value="-XX:-DisableExplicitGC"/>
			<jvmarg value="-Dsun.security.ssl.allowUnsafeRenegotiation=true"/>
				
			<classpath>
				<pathelement location="${build.compile.dir}" />
				<path refid="junit.classpath" />
				<path refid="compile.classpath" />

			</classpath>

			<formatter type="xml" />

			<batchtest fork="yes" todir="${dir.build.testresults}">
				<fileset dir="${dir.src.tests}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
		<echo>JUNIT Errors: ${tests.errors}</echo>
		<echo>JUNIT Failures: ${tests.failures}</echo>
	</target>


</project>